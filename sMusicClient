#!/usr/bin/python2
# -*- coding: utf-8 -*-
"""
Bardzo minimalny testowy klient TCP
"""
from smusicclient import gaps_controller as gaps
from smusicclient import download_controller
from smusicclient import logs
from smusicclient.protocol_functions import binder
from smusicclient.protocol_utils import ConnectionThread
from smusicclient import player
import time
from smusicclient import __version__
binds = {}
was_interrupted = False

def start_connection():
    global thread_conn
    binder.set_gaps_controller(gaps)
    binder.set_library(library)
    binder.set_player(p)
    thread_conn = ConnectionThread(binder)
    thread_conn.start()


def init_gaps():
    global thread_gap
    gaps.load_gaps()
    thread_gap = gaps.GapThread(p)
    thread_gap.start()

if __name__ == "__main__":
    logs.setup_logging()
    logs.print_info("\n+---------------------------------------------+\n|" +
                    ("sMusic-core v{}".format(__version__).center(45, " ")) + "|\n|" +
                    "https://github.com/mRokita/sMusic-core".center(45, " ") +
                    "|\n+---------------------------------------------+\n")
    p = player.Player()
    init_gaps()
    library = player.get_musiclibrary()
    download_controller.init(library)
    logs.print_info("Zakończono analizowanie biblioteki")
    logs.print_info("Ładowanie przerw...")
    start_connection()
    logs.print_warning("Klient sMusic gotowy")
    try:
        while True:
            time.sleep(100)
    except (KeyboardInterrupt, SystemExit):
        logs.print_info("Zatrzymywanie kontroli przerw...")
        thread_gap.stop()
        logs.print_info("Zatrzymano kontrolę przerw!")
        logs.print_info("Rozłączanie z serwerem...")
        thread_conn.stop()
        logs.print_info("Rozłączono z serwerem!")
        logs.print_warning("Zakończono pracę klienta")
